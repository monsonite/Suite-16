0001   0000             ; This code contains  the main utility routines for Suite-16
0002   0000             ; 
0003   0000             ; GetText
0004   0000             ; PrintNum
0005   0000             ; PrintHex
0006   0000             ; GetHex
0007   0000             ; HexDump
0008   0000             ; 
0009   0000             ; use tasm -s -h -c -g0 -t16 Suite16_tasm_utils.asm out.hex
0010   0000             
0011   0000             EOS:         .EQU    $0000  ;End of string
0012   0000             
0013   0000             .org $0000
0014   0000             start:
0015   0000             
0016   0000 0F 00           NOP                     ; Leave this location free for possible branch
0017   0001             	
0018   0001             GETTEXT:	
0019   0001             	
0020   0001 10 00 00 3E 	SET R0,  62             ; > cursor
0021   0003 0C 00       	OUT						; Print cursor
0022   0004 0D 00       	IN						; Getchar
0023   0005             	
0024   0005 11 00 02 00 	SET R1, 512			    ; R1 points to char buffer
0025   0007             	
0026   0007             loop1:	
0027   0007 41 00       	LD R0, @R1				; get first character
0028   0008 0C 00       	OUT                     ; output character
0029   0009 E1 00       	INC R1
0030   000A 01 07       	BGT loop1				; get characters until you find an EOS
0031   000B 00 40       	BRA GETHEX
0032   000C 0F 00       	NOP
0033   000D 0F 00       	NOP
0034   000E 0F 00       	NOP
0035   000F 0F 00       	NOP
0036   0010             
0037   0010             PRINTNUM:
0038   0010             
0039   0010                 ;Prints out a 5 digit decimal number to the terminal according to contents of R0
0040   0010                 ; Leading zeroes are not suppressed
0041   0010                 ;  R1 = Decimation Value
0042   0010                 ;  R2 = digit 
0043   0010                 ;  R3 = 0x30
0044   0010                 ;  R4 = temporary storage for accumulator (decimated value)
0045   0010             
0046   0010 12 00 00 00 	SET R2, 0
0047   0012 13 00 00 30 	SET R3, 48
0048   0014             	
0049   0014 11 00 27 10 	SET R1, 10000
0050   0016 08 00 00 30 	CALL decimate
0051   0018             	
0052   0018 11 00 03 E8 	SET R1, 1000
0053   001A 08 00 00 30 	CALL decimate
0054   001C             	
0055   001C 11 00 00 64 	SET R1, 100
0056   001E 08 00 00 30 	CALL decimate
0057   0020             	
0058   0020 11 00 00 0A 	SET R1, 10
0059   0022 08 00 00 30 	CALL decimate
0060   0024             	
0061   0024 A3 00       	ADD R3
0062   0025 0C 00       	OUT
0063   0026 B4 00       	SUB R4
0064   0027             	
0065   0027 10 00 00 0A 	SET R0, 10				;CR
0066   0029 0C 00       	OUT
0067   002A 10 00 00 0D 	SET R0, 13				;LF
0068   002C 0C 00       	OUT
0069   002D 00 00       	BRA start
0070   002E             	
0071   002E 0F 00       	NOP
0072   002F 0F 00       	NOP
0073   0030             
0074   0030             decimate:
0075   0030             
0076   0030 B1 00       	SUB R1
0077   0031 02 34           BLT value
0078   0032 E2 00           INC R2
0079   0033 00 30           BRA decimate	
0080   0034             	
0081   0034             value:
0082   0034             
0083   0034 34 00       	ST R4, R0
0084   0035 22 00       	LD R0, R2
0085   0036 A3 00       	ADD R3 					; make R0 a printable digit
0086   0037 0C 00       	OUT						; print a digit
0087   0038             	
0088   0038 24 00       	LD R0, R4
0089   0039 A1 00       	ADD R1
0090   003A 12 00 00 00 	SET R2, 0				; reset R2
0091   003C             	
0092   003C 09 00       	RET
0093   003D 0F 00       	NOP
0094   003E 0F 00       	NOP
0095   003F 0F 00       	NOP
0096   0040             	
0097   0040             GETHEX:
0098   0040             
0099   0040             			; Accepts a hexadecimal number up to FFFF from terminal input buffer
0100   0040             			; converts it to an integer and puts it into register R0
0101   0040             			; It can then be printed out as a decimal using PRINTNUM - for checking integrity
0102   0040             			; R1 is the pointer in the text buffer - which starts at 0x0200
0103   0040             			; R4 is used as a temporary store for the character in the accumulator R0
0104   0040             			; R5 is used in the "Times 16" routine
0105   0040             			; R7 is used to accumulate the powers of 16 when forming the integer in R0
0106   0040             	
0107   0040 11 00 02 00 	SET R1, 512				; R1 is start of text buffer
0108   0042 17 00 00 00 	SET R7, 0				; Clear R7
0109   0044             
0110   0044             nextchar:
0111   0044             
0112   0044 41 00       	LD R0, @R1
0113   0045 34 00       	ST R4, R0
0114   0046 E1 00       	INC R1
0115   0047 41 00       	LD R0, @R1				; get the next character
0116   0048             	
0117   0048 0B 30       	SBI 48					; Is it bigger than 0x30?
0118   0049 02 55       	BLT quit
0119   004A 0B 17       	SBI 23					; Is is bigger than ascii 'F'
0120   004B 03 55       	BGE quit
0121   004C             	
0122   004C 08 00 00 59 	CALL modify
0123   004E             	
0124   004E A7 00       	ADD R7
0125   004F A0 00       	ADD R0					; 2X
0126   0050 A0 00       	ADD R0					; 4X
0127   0051 A0 00       	ADD R0					; 8X
0128   0052 A0 00       	ADD R0					; 16X
0129   0053             	
0130   0053 37 00       	ST  R7, R0				; R7 is the accumulating sum
0131   0054             	
0132   0054 00 44       	BRA nextchar
0133   0055             	
0134   0055             quit:	
0135   0055 08 00 00 59 	CALL modify
0136   0057             	
0137   0057 A7 00       	ADD R7					; Add in the final digit
0138   0058 00 10       	BRA PRINTNUM			; Print it out in decimal
0139   0059             	
0140   0059             modify:
0141   0059             
0142   0059             		; If R0 = 0-9 subtract 0x30 to form a number 0-9
0143   0059             		; If R0 = A-F subtract 0x37 to form a number 10-15
0144   0059             	
0145   0059 24 00       	LD R0, R4				; Get R0 back from R4
0146   005A 0B 40       	SBI  64					; Is it bigger than 0x40?
0147   005B 02 5E       	BLT  decimal			; must be a decimal 0-9
0148   005C 0A 09       	ADI  9                  ; Add 9 to turn R0 into 10 -15
0149   005D 00 60       	BRA endmodify
0150   005E             	
0151   005E             decimal: 
0152   005E             
0153   005E 24 00       	LD R0, R4				; Get R0 back from R4
0154   005F 0B 30       	SBI 48					; convert to a decimal number
0155   0060             	
0156   0060             endmodify:
0157   0060             
0158   0060 09 00       	RET
0159   0061 0F 00       	NOP
0160   0062 0F 00       	NOP
0161   0063 0F 00       	NOP
0162   0064 0F 00       	NOP
0163   0065 0F 00       	NOP
0164   0066             	
0165   0066             ;------------------------------------Print Hex------------------------------------
0166   0066             
0167   0066             ;  Prints out a 4 digit hexadecimal number to the terminal according to contents of R0
0168   0066             ;  Leading zeroes are not suppressed
0169   0066             ;  R1 = Heximation Value
0170   0066             ;  R2 = digit 
0171   0066             ;  R3 = 0x30
0172   0066             ;  R4 = temporary storage for accumulator (decimated value)
0173   0066             ;  R6 = temporary store for output character
0174   0066             
0175   0066             ; This is based on the PrintNum routine with modifications to handle A-F characters
0176   0066             
0177   0066             PRINTHEX:
0178   0066             
0179   0066 12 00 00 00 		SET R2,   0
0180   0068 13 00 00 30 		SET R3,   $30
0181   006A             		
0182   006A 11 00 10 00 		SET R1,   4096
0183   006C 08 00 00 80 		CALL   heximate
0184   006E             		
0185   006E 11 00 01 00 		SET R1,   256
0186   0070 08 00 00 80 		CALL   heximate
0187   0072             		
0188   0072 11 00 00 10 		SET R1,   16
0189   0074 08 00 00 80 		CALL   heximate
0190   0076             		
0191   0076 0A 30       		ADI $30				; Make R0 a number character
0192   0077             		
0193   0077 36 00       		ST R6, R0			; temporary store character in R6
0194   0078 0B 3A       		SBI $3A				; Is it bigger than ascii '9'
0195   0079             		
0196   0079 02 7D       		BLT  printdec		; output as a decimal digit
0197   007A 0A 41       		ADI $41				; modify R0 to make it a hex digit
0198   007B 0C 00       		OUT					; output a hex digit
0199   007C 00 7F       		BRA retn
0200   007D             
0201   007D             printdec:
0202   007D             		
0203   007D 26 00       		LD	R0, R6			; get character back from R6
0204   007E             
0205   007E 0C 00       		OUT					; print it as a decimal digit
0206   007F 09 00       retn:	RET		
0207   0080             		
0208   0080             heximate:
0209   0080             
0210   0080 B1 00       		SUB R1				; Subtract the power of 16
0211   0081 02 84       		BLT tempstore
0212   0082 E2 00       		INC R2
0213   0083 00 80       		BRA heximate
0214   0084             		
0215   0084             tempstore:
0216   0084             
0217   0084 34 00       		ST R4, R0			; temporarily store the remainder
0218   0085 22 00       		LD R0, R2			; get the count from R2
0219   0086 0A 30       		ADI $30				; ADD 0x30 to make a number
0220   0087 36 00       		ST R6, R0			; Temporary store to R6
0221   0088             		
0222   0088 0B 3A       		SBI $3A				; is it bigger than ascii '9'
0223   0089 02 8D       		BLT printdec2		; output as decimal
0224   008A 0A 41       		ADI $41				; make it a hex digit
0225   008B 0C 00       		OUT
0226   008C             		
0227   008C 00 8F       		BRA restore2
0228   008D             		
0229   008D             printdec2:		
0230   008D             
0231   008D 26 00       		LD R0, R6
0232   008E 0C 00       		OUT
0233   008F             		
0234   008F             restore2:
0235   008F             
0236   008F 24 00       		LD R0, R4
0237   0090 A1 00       		ADD R1				; adds the R1 value to restore sum
0238   0091 12 00 00 00 		SET R2, 0			; Clear the count
0239   0093 09 00       		RET
0240   0094             		
0241   0094             ; ---------------------------HEXDUMP------------------------------------------ 
0242   0094             
0243   0094             ; Dump a page of memory to the screen
0244   0094             ; Address on LHS, followed by 16 words across the screen need about 90 characters wide
0245   0094             ; Print out 256 words over 16 lines
0246   0094             
0247   0094             ; R0 = value to be printed
0248   0094             ; R11 = pointer to memory starting at 0x0000
0249   0094             
0250   0094 1D 00 00 0D 	SET R13, $0D		; Preload with carriage return char
0251   0096 19 00 01 00 	SET R9,  $100		; 256 words to dump
0252   0098 1A 00 00 0A 	SET R10, $0A		; 16 words to a line
0253   009A 1B 00 00 00 	SET R11, 0			; Begin dump from address 0
0254   009C             
0255   009C             nextaddress:	
0256   009C             	
0257   009C             	
0258   009C 2B 00       	LD R0, R11			; Get the address
0259   009D 08 00 00 66 	CALL PRINTHEX		; print the address
0260   009F 10 00 00 3E 	SET R0, $3E			; a > cursor
0261   00A1 0C 00       	OUT
0262   00A2 10 00 00 20 	SET R0, $20			; two spaces
0263   00A4 0C 00       	OUT
0264   00A5 0C 00       	OUT
0265   00A6             	
0266   00A6             nextword:
0267   00A6             
0268   00A6 4B 00       	LD R0, @R11			; get the next word from memory
0269   00A7 08 00 00 66 	CALL PRINTHEX		; print the mem-word
0270   00A9 10 00 00 20 	SET R0, $20			; a space
0271   00AB 0C 00       	OUT
0272   00AC             	
0273   00AC EB 00       	INC R11				; increment memory pointer
0274   00AD DA 00       	DEC R10				; decrement word counter
0275   00AE D9 00       	DEC R9				; decrement page address counter
0276   00AF 2A 00       	LD R0, R10			; get word counter
0277   00B0 01 A6       	BGT nextword
0278   00B1             	
0279   00B1 29 00       	LD R0, R9  			; get page address counter
0280   00B2             	
0281   00B2 04 B8       	BLE nextline
0282   00B3 08 00 00 BD 	CALL CRLF
0283   00B5             	
0284   00B5 1A 00 00 16 	SET R10, $16		; reset word counter to 16
0285   00B7             	
0286   00B7 00 9C       	BRA nextaddress		; get address for next line
0287   00B8             
0288   00B8             nextline:
0289   00B8             	
0290   00B8 08 00 00 BD 	CALL CRLF			; two blank lines
0291   00BA 08 00 00 BD 	CALL CRLF
0292   00BC             	
0293   00BC 00 00       	BRA start			; Repeat ad nauseum
0294   00BD             
0295   00BD             CRLF:					; Output a CRLF
0296   00BD             
0297   00BD 2D 00       	LD R0, R13			;  Get CR from R13
0298   00BE 0C 00       	OUT
0299   00BF 0B 03       	SBI 3				; Make a LF
0300   00C0 0C 00       	OUT
0301   00C1 09 00       	RET
0302   00C2             	
0303   00C2             	
0304   00C2             .end	
ADDR  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
-----------------------------------------------------
0000  0F 00 10 00 00 3E 0C 00 0D 00 11 00 02 00 41 00
0010  0C 00 E1 00 01 07 00 40 0F 00 0F 00 0F 00 0F 00
0020  12 00 00 00 13 00 00 30 11 00 27 10 08 00 00 30
0030  11 00 03 E8 08 00 00 30 11 00 00 64 08 00 00 30
0040  11 00 00 0A 08 00 00 30 A3 00 0C 00 B4 00 10 00
0050  00 0A 0C 00 10 00 00 0D 0C 00 00 00 0F 00 0F 00
0060  B1 00 02 34 E2 00 00 30 34 00 22 00 A3 00 0C 00
0070  24 00 A1 00 12 00 00 00 09 00 0F 00 0F 00 0F 00
0080  11 00 02 00 17 00 00 00 41 00 34 00 E1 00 41 00
0090  0B 30 02 55 0B 17 03 55 08 00 00 59 A7 00 A0 00
00A0  A0 00 A0 00 A0 00 37 00 00 44 08 00 00 59 A7 00
00B0  00 10 24 00 0B 40 02 5E 0A 09 00 60 24 00 0B 30
00C0  09 00 0F 00 0F 00 0F 00 0F 00 0F 00 12 00 00 00
00D0  13 00 00 30 11 00 10 00 08 00 00 80 11 00 01 00
00E0  08 00 00 80 11 00 00 10 08 00 00 80 0A 30 36 00
00F0  0B 3A 02 7D 0A 41 0C 00 00 7F 26 00 0C 00 09 00
0100  B1 00 02 84 E2 00 00 80 34 00 22 00 0A 30 36 00
0110  0B 3A 02 8D 0A 41 0C 00 00 8F 26 00 0C 00 24 00
0120  A1 00 12 00 00 00 09 00 1D 00 00 0D 19 00 01 00
0130  1A 00 00 0A 1B 00 00 00 2B 00 08 00 00 66 10 00
0140  00 3E 0C 00 10 00 00 20 0C 00 0C 00 4B 00 08 00
0150  00 66 10 00 00 20 0C 00 EB 00 DA 00 D9 00 2A 00
0160  01 A6 29 00 04 B8 08 00 00 BD 1A 00 00 16 00 9C
0170  08 00 00 BD 08 00 00 BD 00 00 2D 00 0C 00 0B 03
0180  0C 00 09 00 00 00 00 00 00 00 00 00 00 00 00 00


tasm: Number of errors = 0
